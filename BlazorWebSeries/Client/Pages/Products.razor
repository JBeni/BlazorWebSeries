@page "/products"

@using BlazorWebSeries.Client.Components.ProductTable
@using BlazorWebSeries.Client.HttpRepository
@using BlazorWebSeries.Shared.Entities
@using BlazorWebSeries.Shared.RequestFeatures

@inject IProductHttpRepository? ProductRepository

<div class="row">
    <div class="col-md-5">
        <Search OnSearchChanged="SearchChanged"/>
    </div>
    <div class="col-md-5">
        <Sort OnSortChanged="SortChanged" />
    </div>
    <div class="col-md-2">
        <a href="/createProduct">Create Product</a>
    </div>
</div>

@if (ProductList is not null)
{
    <div class="row">
        <ProductTable Products="ProductList" />
    </div>
    <div class="row">
        <div class="col">
            <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" />
        </div>
    </div>
}
else
{
    <div id="app">
        <div class="d-flex justify-content-center display-3" style="margin-top: 170px;">
            <MatProgressCircle Indeterminate="true" FourColored="true" Size="MatProgressCircleSize.Large" />    
        </div>
    </div>
}

@code {
    public List<Product>? ProductList { get; set; }
    public MetaData MetaData { get; set; } = new MetaData();

    private ProductParameters _productParameters = new ProductParameters();

    protected async override Task OnInitializedAsync()
    {
        await GetProducts();
    }

    private async Task SelectedPage(int page)
    {
        _productParameters.PageNumber = page;
        await GetProducts();
    }

    private async Task GetProducts()
    {
        var pagingResponse = await ProductRepository.GetProducts(_productParameters);
        ProductList = pagingResponse.Items;
        MetaData = pagingResponse.MetaData;
    }

    private async Task SearchChanged(string searchTerm)
    {
        Console.WriteLine(searchTerm);
        _productParameters.PageNumber = 1;
        _productParameters.SearchTerm = searchTerm;
        await GetProducts();
    }

    private async Task SortChanged(string orderBy)
    {
        Console.WriteLine(orderBy);
        _productParameters.OrderBy = orderBy;
        await GetProducts();
    }
}
