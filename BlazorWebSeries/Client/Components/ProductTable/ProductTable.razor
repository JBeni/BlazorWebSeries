@using BlazorWebSeries.Shared.Entities

@inject NavigationManager NavigationManager
@inject IJSRuntime Js

@if (Products.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col"></th>
                <th scope="col">Name</th>
                <th scope="col">Supplier</th>
                <th scope="col">Price</th>
                <th scope="col">Update</th>
                <th scope="col">Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Products)
            {
                <tr>
                    <td>
                        <img src="@product.ImageUrl" alt="product image" style="width:100px;" />
                    </td>
                    <td class="align-middle">
                        @product.Name
                    </td>
                    <td class="align-middle">
                        @product.Supplier
                    </td>
                    <td class="align-middle">
                        $@product.Price
                    </td>
                    <td class="align-middle">
                        <button type="button" class="btn btn-info">Update</button>
                    </td>
                    <td class="align-middle">
                        <button type="button" class="btn btn-danger">Delete</button>
                    </td>
                </tr>
             }
            </tbody>
    </table>
}
else
{
    <span>
        Loading products...
    </span>
}

@code {
    [Parameter]
    public List<Product> Products { get; set; }
    [Parameter]
    public EventCallback<Guid> OnDeleted { get; set; }

    private void RedirectToUpdate(Guid id) 
    { 
        var url = Path.Combine("/updateProduct/", id.ToString()); 
        NavigationManager.NavigateTo(url); 
    }

    private async Task Delete(Guid id)
    {
        var product = Products.FirstOrDefault(p => p.Id.Equals(id));
        var confirmed = await Js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {product.Name} product?");
        if (confirmed)
        {
            await OnDeleted.InvokeAsync(id);
        }
    }
}
